name: Continuous Integration

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  ci:
    name: CI
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: oyster
          POSTGRES_PASSWORD: oyster
          POSTGRES_USER: oyster
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping" --health-interval 10s --health-timeout
          5s --health-retries 5

    env:
      BASE_SHA: ${{ github.event.pull_request.base.sha }}
      DATABASE_URL: postgres://oyster:oyster@localhost:5432/oyster
      REDIS_URL: redis://localhost:6379

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Turborepo setup
        uses: actions/cache@v4
        with:
          # When running turbo commands, we use `.turbo` as the cache directory.
          # See the root `package.json` for reference.
          path: .turbo

          key: ${{ runner.os }}-turbo-${{ github.sha }}

          # This is how GitHub Actions restores the cache. Because we only
          # the prefix of the key (and not the `github.sha`), this will allow
          # us to hit the cache on any CI runs on commit on any branch.
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run database migrations and generate types
        run: yarn db:migrate

      - name: Check if user exists in PostgreSQL and post warning message
        uses: actions/github-script@v6
        with:
          script: |
            const g = require('@actions/github');

            const github_id = context.payload.pull_request.user.id;
            const exists = psql("$DATABASE_URL", `-tAc "SELECT EXISTS (SELECT 1 FROM students WHERE github_id = '${github_id}');"`);

            if (exists !== 't') {
              const body = "It doesn't seem like you are a ColorStack member. This codebase is primarily meant to benefit our students so that they can gain experience contributing to a codebase, so unfortunately your contribution will not be prioritized. If you are a ColorStack member, then be sure to connect your GitHub account in your Member Profile.";

              g.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

      - name: Lint
        run: yarn lint --filter=[$BASE_SHA]

      - name: Check types
        run: yarn type-check --filter=[$BASE_SHA]

      - name: Build all packages and applications
        run: yarn build --filter=[$BASE_SHA]

      - name: Run tests
        run: yarn test --filter=[$BASE_SHA]
